#!/usr/bin/env node

const yargs = require('yargs').options({
    'orders': {
        alias: 'o',
        type: 'array',
        default: undefined,
        description: 'Array of orders (number of control points) of each bézier curve '+
            'function.'
    },
    'types': {
        alias: 't',
        type: 'array',
        default: undefined,
        description: 'The data type (dimension) of each bézier curve function; '+
            'may be any `mix`-able type (for GLSL: `float`, `vec2`, `vec3`, `vec4`).'
    },
    'name': {
        alias: 'n',
        type: 'string',
        default: undefined,
        description: 'The name to use for the (overloaded) bézier curve function/s.'
    },
    'mix': {
        alias: 'm',
        type: 'string',
        default: undefined,
        description: 'The name of the per-element (linear) interpolation function; '+
            'may be the name for any externally-defined function with the same '+
            'behaviour and arguments as the GLSL `mix`.'
    },
    'pre': {
        type: 'string',
        default: undefined,
        description: 'Any prefix text to include.'
    },
    'suf': {
        type: 'string',
        default: undefined,
        description: 'Any suffix text to include; by default, does `glslify` export.'
    },
    'file': {
        alias: 'f',
        type: 'string',
        default: undefined,
        description: 'The output file path for the generated code.'
    }
});

const { makeBeziers } = require('.');

const beziers = makeBeziers(yargs.argv);
const { file } = yargs.argv;

if(file) {
    const { resolve, dirname } = require('path');
    const { writeFileSync } = require('fs');
    const mkdirp = require('mkdirp');

    const filePath = resolve(file);
    const dirPath = dirname(filePath);

    mkdirp.sync(dirPath);
    writeFileSync(filePath, beziers);
}
else {
    process.stdout.write(beziers);
}
