const defaultOrders = module.exports.defaultOrders =
    Array(3).fill(0).map((v, i) => i+3);

const defaultTypes = module.exports.defaultTypes = ['float', 'vec2', 'vec3', 'vec4'];


/**
 * Adapted from [`bezier`](https://github.com/hughsk/bezier) for use in generating
 * `glsl` functions.
 *
 * @see [This Wikipedia article](https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Constructing_B.C3.A9zier_curves)
 *
 * @param {number} [order=3] The order (number of control points) in the bézier.
 * @param {string} [type='float'] The data type of the bézier function.
 * @param {string} [name='bezier'] The name of the bézier function.
 * @param {string} [mix='mix'] The name of the per-element interpolation function; may
 *     be the name for any externally-defined functiion with the same behaviour and
 *     arguments as the GLSL `mix`.
 */
function makeBezier(order = 3, type = 'float', name = 'bezier', mix = 'mix') {
    order = (order | 0);

    if(!order) {
        throw new Error('Cannot make a interpolator with no elements');
    }
    else {
        let fn = '\n';

        if(order < 2) {
            fn += '    return cp0;\n';
        }
        else if(order < 3) {
            fn += `    return ${mix}(cp0, cp1, t);\n`;
        }
        else {
            for(let n = order-1; n > 0; --n) {
                for(let i = 0; i < n; ++i) {
                    fn += '    '+
                        ((n === order-1)?
                            `${type} p${i} = ${mix}(cp${i}, cp${i+1}, t);`
                        : ((n > 1)?
                            `p${i} = ${mix}(p${i}, p${i+1}, t);`
                        :   `return ${mix}(p${i}, p${i+1}, t);`))+
                        '\n';
                }

                if(n > 1) {
                    fn += '\n';
                }
            }
        }

        const cps = Array(order).fill(0).map((v, p) => `${type} cp${p}`);

        return `${type} ${name}(${cps.join(', ')}, float t) {${fn}}\n`;
    }
}

module.exports.makeBezier = makeBezier;


const makeBeziers = (orders = defaultOrders, types = defaultTypes, name) =>
    '/** GLSL generated by `bezier-gen` */\n\n'+
    types.map((t) => orders.map((o) => makeBezier(o, t, name)).join('\n')).join('\n\n')+
    '\n/** End of GLSL generated by `bezier-gen` */\n';

module.exports.makeBeziers = makeBeziers;
